{"version":3,"sources":["module.js","main.js","controllers/chatbot-message.js","controllers/chatbot-widget.js","directives/chatbot-message.js","directives/chatbot-widget.js","directives/focus-from.js","directives/scroll-to-bottom.js","services/chatbot.js"],"names":["ng","window","angular","module","controller","$scope","this","data","hide","sendReply","message","$emit","$timeout","chatbotService","pinned","pinnedText","placeholder","delay","title","session","focusTextInput","vm","session_id","type","send","isLoading","isOpen","sendMessage","messageText","hidden","addToChat","url","then","result","Error","forEach","item","index","catch","error","pushError","toggleChatbot","event","onInputKey","which","$on","newData","concat","Object","assign","errorMessage","status","statusText","directive","$window","restrict","replace","templateUrl","controllerAs","scope","height","link","element","attrs","ctrl","$parse","$watch","focusFrom","value","focus","$parent","scrollToBottom","attr","$watchCollection","newVal","scrollTop","scrollHeight","service","$http","API","post","run","$templateCache","put"],"mappings":"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","file":"akit.component.chatbot-widget.min.js","sourcesContent":["(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatbotWidget', []);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatbotWidget', []);\n\n})(window.angular);\n","(function (ng) {\n    \"use strict\";\n\n    ng.module(\"akit.component.chatbotWidget\").controller(\n        \"akit.component.chatbotWidget.chatbotMessageController\",\n        [\n            \"$scope\",\n            \"$timeout\",\n            function ($scope) {\n                this.data = $scope.data || { hide: true };\n\n                this.sendReply = function (message) {\n                    $scope.$emit('chatbotMessageReplyClicked', { message: message });\n                    $scope.data.hide = true;\n                };\n            }\n        ]\n    );\n})(window.angular);\n","(function (ng) {\n    \"use strict\";\n\n    ng.module(\"akit.component.chatbotWidget\").controller(\n        \"akit.component.chatbotWidget.chatbotWidgetController\",\n        [\n            \"$scope\",\n            \"$timeout\",\n            \"akit.component.chatbotWidget.chatbotService\",\n            function ($scope, $timeout, chatbotService) {\n                // ensure we have default values\n                this.pinned = ($scope.pinned === \"false\") ? false : !!$scope.pinned;\n                this.pinnedText = $scope.pinnedText || \"Een vraag stellen\";\n                this.placeholder = $scope.placeholder || \"\";\n                this.delay = $scope.delay || 400;\n                this.title = $scope.title || \"\";\n                this.session = $scope.session;\n                // $scope.height is used directly (two-way binding)\n\n                // set to true to focus the text entry field\n                $scope.focusTextInput = false;\n\n                var vm = this;\n                vm.data = [];\n                vm.message = {\n                    session_id: this.session,\n                    message: \"\",\n                    type: \"text\",\n                    send: true\n                };\n                vm.isLoading = false;\n                vm.isOpen = false;\n\n                vm.sendMessage = function (messageText, hidden) {\n                    if (messageText) vm.message.message = messageText;\n                    // user did not type a message && we aren't sending this programmatically\n                    if (!vm.message.message && !hidden) {\n                        return;\n                    }\n\n                    // Start loader\n                    vm.isLoading = true;\n\n                    // Add to data\n                    if (!hidden) vm.addToChat(vm.message);\n\n                    // Send new data\n                    chatbotService\n                        .sendMessage($scope.url, vm.message)\n                        .then(\n                            function (result) {\n                                if (result.data) {\n                                    result.data.forEach(function (item, index) {\n                                        $timeout(function () {\n                                            vm.addToChat(item);\n                                        }, index * vm.delay);\n                                    });\n                                    vm.isLoading = false;\n                                } else {\n                                    throw new Error(\"no data returned from service\");\n                                }\n                            }\n                        ).catch(\n                            function (error) {\n                                vm.pushError(error);\n                                vm.isLoading = false;\n                            }\n                        );\n\n                    // Clean\n                    this.message.message = \"\";\n\n                    // Focus\n                    $scope.focusTextInput = true;\n                };\n\n                vm.toggleChatbot = function () {\n                    this.isOpen = !this.isOpen;\n                    if (this.isOpen) {\n                        $timeout(function () {\n                            $scope.focusTextInput = true;\n                        });\n                    }\n                };\n\n                vm.sendReply = function (event, data) {\n                    vm.sendMessage(data.message);\n                };\n\n                vm.onInputKey = function (event) {\n                    if (event.which === 13) {\n                        vm.sendMessage();\n                    }\n                };\n\n                // listen to click events of child <aui-chatbot-message> directives\n                $scope.$on('chatbotMessageReplyClicked', vm.sendReply);\n\n                vm.addToChat = function (message) {\n                    if (message.type === \"text\" && message.message === \"\") {\n                        // ignore blank messages\n                        // welcome message must not be shown if it is the empty string\n                    } else {\n                        var newData = [].concat(vm.data, [\n                            Object.assign({}, message)\n                        ]);\n                        this.data = newData;    \n                    }\n                };\n\n                vm.pushError = function (error) {\n                    var errorMessage = {\n                        message:\n                            \"Error \" +\n                            error.status +\n                            \" - \" +\n                            error.statusText +\n                            \": \" +\n                            error.error.title,\n                        type: \"error\"\n                    };\n                    this.addToChat(errorMessage);\n                };\n\n                // request opening message from chatbot\n                vm.sendMessage(\" \", true);\n            }\n        ]\n    );\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatbotWidget')\n        .directive('auiChatbotMessage', [\n            '$timeout',\n            '$window',\n            function (\n                $timeout,\n                $window\n            ) {\n\n                return {\n                    restrict: 'E',\n                    replace: true,\n                    templateUrl: '/assets/chatbot-widget/views/directives/chatbot-message.htm',\n                    controller: 'akit.component.chatbotWidget.chatbotMessageController',\n                    controllerAs: 'msg',\n                    scope: {\n                        data: '='\n                    }\n                };\n\n            }\n        ]);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatbotWidget')\n        .directive('auiChatbotWidget', [\n            function () {\n\n                return {\n                    restrict: 'AE',\n                    replace: true,\n                    templateUrl: '/assets/chatbot-widget/views/directives/chatbot-widget.htm',\n                    controller: 'akit.component.chatbotWidget.chatbotWidgetController',\n                    controllerAs: 'chatbot',\n                    scope: {\n                        url: '@',\n                        session: '@',\n                        title: '@',\n                        pinned: '@?',\n                        pinnedText: '@?',\n                        placeholder: '@?',\n                        delay: '@?',\n                        height: '=?'\n                    },\n                    link: function (scope, element, attrs, ctrl) {\n\n                    }\n                };\n\n            }\n        ]);\n\n})(window.angular);\n","(function (ng) {\r\n    'use strict';\r\n\r\n    // based on https://stackoverflow.com/a/14837021/20980\r\n    // <input focusFrom=\"focusMyInput\"> will be focused\r\n    // when this.focusMyInput is set to true in the controller\r\n    // and will then set this.focusMyInput to false\r\n\r\n    ng\r\n        .module('akit.component.chatbotWidget')\r\n        .directive('focusFrom', ['$timeout', '$parse', function ($timeout, $parse) {\r\n            return {\r\n                restrict: 'A',\r\n                link: function (scope, element, attrs) {\r\n                    scope.$watch(attrs.focusFrom, function (value) {\r\n                        if (value) {\r\n                            $timeout(function () {\r\n                                element[0].focus();\r\n                            });\r\n                            scope.$parent[attrs.focusFrom] = false;\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n        }]);\r\n\r\n})(window.angular);\r\n","(function (ng) {\r\n    'use strict';\r\n\r\n    // based on https://stackoverflow.com/a/40164638/20980\r\n\r\n    ng\r\n        .module('akit.component.chatbotWidget')\r\n        .directive('scrollToBottom', function ($timeout, $window) {\r\n            return {\r\n                scope: {\r\n                    scrollToBottom: \"=\"\r\n                },\r\n                restrict: 'A',\r\n                link: function (scope, element, attr) {\r\n                    scope.$watchCollection('scrollToBottom', function (newVal) {\r\n                        if (newVal) {\r\n                            $timeout(function () {\r\n                                element[0].scrollTop =  element[0].scrollHeight;\r\n                            }, 0);\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n        });\r\n\r\n})(window.angular);\r\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatbotWidget')\n        .service('akit.component.chatbotWidget.chatbotService', [\n            '$http',\n            '$interval',\n            '$q',\n            function ($http) {\n\n                var API = {};\n\n                function sendMessage(url, message) {\n                    return $http.post(url, Object.assign({}, message)).then(\n                        function (result) {\n                            return result.data;\n                        }\n                    );\n                }\n\n                API.sendMessage = sendMessage;\n\n                return API;\n\n            }\n        ]);\n\n})(window.angular);\n"],"sourceRoot":"dist\\js"}