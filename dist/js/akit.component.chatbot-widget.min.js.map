{"version":3,"sources":["module.js","main.js","controllers/chatbot-message.js","controllers/chatbot-widget.js","directives/chatbot-message.js","directives/chatbot-widget.js","directives/focus-from.js","directives/scroll-to-bottom.js","services/chatbot.js"],"names":["ng","window","angular","module","controller","$scope","this","data","hide","sendReply","message","$emit","$timeout","chatbotService","pinned","pinnedText","placeholder","delay","height","title","session","focusTextInput","vm","session_id","type","send","isLoading","isOpen","sendMessage","addToChat","url","then","result","Error","forEach","item","index","catch","error","pushError","toggleChatbot","event","onInputKey","which","$on","newData","concat","Object","assign","errorMessage","status","statusText","directive","$window","restrict","replace","templateUrl","controllerAs","scope","link","element","attrs","ctrl","$parse","$watch","focusFrom","value","focus","$parent","scrollToBottom","attr","$watchCollection","newVal","scrollTop","scrollHeight","service","$http","API","post","run","$templateCache","put"],"mappings":"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","file":"akit.component.chatbot-widget.min.js","sourcesContent":["(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatbotWidget', []);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatbotWidget', []);\n\n})(window.angular);\n","(function (ng) {\n    \"use strict\";\n\n    ng.module(\"akit.component.chatbotWidget\").controller(\n        \"akit.component.chatbotWidget.chatbotMessageController\",\n        [\n            \"$scope\",\n            \"$timeout\",\n            function ($scope) {\n                this.data = $scope.data || { hide: true };\n\n                this.sendReply = function (message) {\n                    $scope.$emit('chatbotMessageReplyClicked', { message: message });\n                    $scope.data.hide = true;\n                };\n            }\n        ]\n    );\n})(window.angular);\n","(function (ng) {\n    \"use strict\";\n\n    ng.module(\"akit.component.chatbotWidget\").controller(\n        \"akit.component.chatbotWidget.chatbotWidgetController\",\n        [\n            \"$scope\",\n            \"$timeout\",\n            \"akit.component.chatbotWidget.chatbotService\",\n            function ($scope, $timeout, chatbotService) {\n                // ensure we have default values\n                this.pinned = ($scope.pinned === \"false\") ? false : !!$scope.pinned;\n                this.pinnedText = $scope.pinnedText || \"Een vraag stellen\";\n                this.placeholder = $scope.placeholder || \"\";\n                this.delay = $scope.delay || 400;\n                this.height = $scope.height || 400;\n                this.title = $scope.title || \"\";\n                this.session = $scope.session;\n\n                // set to true to focus the text entry field\n                $scope.focusTextInput = false;\n\n                var vm = this;\n                vm.data = [];\n                vm.message = {\n                    session_id: this.session,\n                    message: \"\",\n                    type: \"text\",\n                    send: true\n                };\n                vm.isLoading = false;\n                vm.isOpen = false;\n\n                vm.sendMessage = function () {\n                    if (!vm.message.message) {\n                        return;\n                    }\n\n                    // Start loader\n                    vm.isLoading = true;\n\n                    // Add to data\n                    vm.addToChat(vm.message);\n\n                    // Send new data\n                    chatbotService\n                        .sendMessage($scope.url, vm.message)\n                        .then(\n                            function (result) {\n                                if (result.data) {\n                                    result.data.forEach(function (item, index) {\n                                        $timeout(function () {\n                                            vm.addToChat(item);\n                                        }, index * vm.delay);\n                                    });\n                                    vm.isLoading = false;\n                                } else {\n                                    throw new Error(\"no data returned from service\");\n                                }\n                            }\n                        ).catch(\n                            function (error) {\n                                vm.pushError(error);\n                                vm.isLoading = false;\n                            }\n                        );\n\n                    // Clean\n                    this.message.message = \"\";\n\n                    // Focus\n                    $scope.focusTextInput = true;\n                };\n\n                vm.toggleChatbot = function () {\n                    this.isOpen = !this.isOpen;\n                    if (this.isOpen) {\n                        $timeout(function () {\n                            $scope.focusTextInput = true;\n                        });\n                    }\n                };\n\n                vm.sendReply = function (event, data) {\n                    vm.message.message = data.message;\n                    vm.sendMessage();\n                };\n\n                vm.onInputKey = function (event) {\n                    if (event.which === 13) {\n                        vm.sendMessage();\n                    }\n                };\n\n                // listen to click events of child <aui-chatbot-message> directives\n                $scope.$on('chatbotMessageReplyClicked', vm.sendReply);\n\n                vm.addToChat = function (message) {\n                    var newData = [].concat(vm.data, [\n                        Object.assign({}, message)\n                    ]);\n                    this.data = newData;\n                };\n\n                vm.pushError = function (error) {\n                    var errorMessage = {\n                        message:\n                            \"Error \" +\n                            error.status +\n                            \" - \" +\n                            error.statusText +\n                            \": \" +\n                            error.error.title,\n                        type: \"error\"\n                    };\n                    this.addToChat(errorMessage);\n                };\n            }\n        ]\n    );\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatbotWidget')\n        .directive('auiChatbotMessage', [\n            '$timeout',\n            '$window',\n            function (\n                $timeout,\n                $window\n            ) {\n\n                return {\n                    restrict: 'E',\n                    replace: true,\n                    templateUrl: '/assets/chatbot-widget/views/directives/chatbot-message.htm',\n                    controller: 'akit.component.chatbotWidget.chatbotMessageController',\n                    controllerAs: 'msg',\n                    scope: {\n                        data: '='\n                    }\n                };\n\n            }\n        ]);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatbotWidget')\n        .directive('auiChatbotWidget', [\n            function () {\n\n                return {\n                    restrict: 'AE',\n                    replace: true,\n                    templateUrl: '/assets/chatbot-widget/views/directives/chatbot-widget.htm',\n                    controller: 'akit.component.chatbotWidget.chatbotWidgetController',\n                    controllerAs: 'chatbot',\n                    scope: {\n                        url: '@',\n                        session: '@',\n                        title: '@',\n                        pinned: '@?',\n                        pinnedText: '@?',\n                        placeholder: '@?',\n                        delay: '@?',\n                        height: '@?'\n                    },\n                    link: function (scope, element, attrs, ctrl) {\n\n                    }\n                };\n\n            }\n        ]);\n\n})(window.angular);\n","(function (ng) {\r\n    'use strict';\r\n\r\n    // based on https://stackoverflow.com/a/14837021/20980\r\n    // <input focusFrom=\"focusMyInput\"> will be focused\r\n    // when this.focusMyInput is set to true in the controller\r\n    // and will then set this.focusMyInput to false\r\n\r\n    ng\r\n        .module('akit.component.chatbotWidget')\r\n        .directive('focusFrom', ['$timeout', '$parse', function ($timeout, $parse) {\r\n            return {\r\n                restrict: 'A',\r\n                link: function (scope, element, attrs) {\r\n                    scope.$watch(attrs.focusFrom, function (value) {\r\n                        if (value) {\r\n                            $timeout(function () {\r\n                                element[0].focus();\r\n                            });\r\n                            scope.$parent[attrs.focusFrom] = false;\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n        }]);\r\n\r\n})(window.angular);\r\n","(function (ng) {\r\n    'use strict';\r\n\r\n    // based on https://stackoverflow.com/a/40164638/20980\r\n\r\n    ng\r\n        .module('akit.component.chatbotWidget')\r\n        .directive('scrollToBottom', function ($timeout, $window) {\r\n            return {\r\n                scope: {\r\n                    scrollToBottom: \"=\"\r\n                },\r\n                restrict: 'A',\r\n                link: function (scope, element, attr) {\r\n                    scope.$watchCollection('scrollToBottom', function (newVal) {\r\n                        if (newVal) {\r\n                            $timeout(function () {\r\n                                element[0].scrollTop =  element[0].scrollHeight;\r\n                            }, 0);\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n        });\r\n\r\n})(window.angular);\r\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatbotWidget')\n        .service('akit.component.chatbotWidget.chatbotService', [\n            '$http',\n            '$interval',\n            '$q',\n            function ($http) {\n\n                var API = {};\n\n                function sendMessage(url, message) {\n                    return $http.post(url, Object.assign({}, message)).then(\n                        function (result) {\n                            return result.data;\n                        }\n                    );\n                }\n\n                API.sendMessage = sendMessage;\n\n                return API;\n\n            }\n        ]);\n\n})(window.angular);\n"],"sourceRoot":"dist\\js"}