{"version":3,"sources":["module.js","main.js","controllers/chatservicer-button.js","constants/chatproxy-config.js","services/chatproxy.js","directives/chatservicer-button.js"],"names":["ng","module","window","angular","controller","$scope","$timeout","chatproxyService","getChatAvailability","getAvailability","entitykey","then","response","vm","available","data","errorCount","nextPoll","pollTime","delay","cancelPoll","pollPromise","cancel","getChatURL","chatURL","url","clickHandler","windowName","windowFeatures","windowUrl","urlWhenUnavailable","open","chatUrlAvailable","chatWindow","closed","focus","disabled","windowURL","occupied","popupOpen","this","constant","chatproxyServiceUrl","service","$http","$interval","$q","chatproxyConfig","get","overrideErrorHandling","API","availabilityData","success","newData","directive","$window","restrict","replace","templateUrl","controllerAs","scope","availabilityServiceUrl","buttonText","buttonTextNoAgent","getLinkServiceUrl","link","element","attrs","ctrl","initialize","$watch","newValue","oldValue","$on","close","addEventListener","run","$templateCache","put"],"mappings":"CAAA,SAAAA,GACA,YAEAA,GACAC,OAAA,yCAEAC,OAAAC,SCNA,SAAAH,GACA,YAEAA,GACAC,OAAA,yCAEAC,OAAAC,SCNA,SAAAH,GACA,YAEAA,GACAC,OAAA,qCACAG,WAAA,kEACA,SACA,WACA,oDACA,SACAC,EACAC,EACAC,GAgBA,QAAAC,KACAD,EAAAE,gBAAAJ,EAAAK,WACAC,KAAA,SAAAC,GACAC,EAAAC,UAAAF,EAAAG,KAAAD,UAEAE,EAAA,EACAC,MALAV,SAOA,SAAAK,GACAC,EAAAC,WAAA,EAEAE,GAAA,EACAC,EAAA,EAAAD,EAAAE,KAIA,QAAAD,GAAAE,GACAA,EAAAA,GAAAD,EAEAE,IACAC,EAAAf,EAAAE,EAAAW,GAGA,QAAAC,KACAd,EAAAgB,OAAAD,GAGA,QAAAE,KACA,GAAAC,GAAAjB,EAAAgB,WAAAlB,EAAAK,UACA,OAAAc,GAAAT,KAAAU,IAGA,QAAAC,GAAAZ,GACA,GAAAa,GAAA,sBACAC,EAAA,yDAEAC,EAAAxB,EAAAyB,oBAAA,EACA,KAAAhB,EAEA,WADAZ,QAAA6B,KAAAF,EAAA,SAIA,IAAAG,GAAAT,GAEA,KAAAV,EAAAoB,WAAAC,OAEA,WADArB,GAAAoB,WAAAE,OAMA,IAHAtB,EAAAuB,UAAA,EAGAvB,EAAAC,UACA,GAAAkB,EAAA,CACAZ,GAEA,IAAAiB,GAAAL,CAEAnB,GAAAoB,WAAA/B,OAAA6B,KAAAM,EAAAV,EAAAC,GACAf,EAAAuB,UAAA,MAEAvB,GAAAyB,UAAA,EACAzB,EAAA0B,WAAA1B,EAAA0B,UACA1B,EAAAC,WAAA,EAEAG,EAAA,SAGAJ,GAAA0B,WAAA1B,EAAAyB,SACAzB,EAAA0B,WAAA,GAEA1B,EAAAyB,UAAA,EACAzB,EAAA0B,WAAA1B,EAAA0B,WArFA,GAIAlB,GAJAR,EAAA2B,KAEAtB,EAAA,IACAF,EAAA,CAGAH,GAAAoB,YACAC,QAAA,GAEArB,EAAAC,UACAD,EAAAuB,UAAA,EACAvB,EAAAyB,UAAA,EACAzB,EAAA0B,WAAA,EA8EA1B,EAAAa,aAAAA,EACAb,EAAAI,SAAAA,EACAJ,EAAAO,WAAAA,EACAP,EAAAL,oBAAAA,MAIAN,OAAAC,SAEA,SAAAH,GACA,YAEAA,GACAC,OAAA,qCACAwC,SAAA,qDACAC,oBAAA,yBAGAxC,OAAAC,SC1HA,SAAAH,GACA,YAEAA,GACAC,OAAA,qCACA0C,QAAA,qDACA,QACA,YACA,KACA,oDACA,SAAAC,EAAAC,EAAAC,EAAAC,GCMA,QAAAtC,GAAAC,GACA,MAAAkC,GAAAI,IAAAD,EAAAL,oBAAA,2BAAAhC,GACAuC,uBAAA,IAIA,QAAA1B,GAAAb,GACA,MAAAkC,GAAAI,IAAAD,EAAAL,oBAAA,qBAAAhC,GACAuC,uBAAA,IAEAtC,KAAA,SAAAC,GACA,MAAAA,GAAAG,OA1BA,GAAAmC,MAEA/B,EAAA,GACAgC,GACAC,SAAA,EACArC,MACAD,WAAA,GA2BA,OAvBA+B,GAAA,WACA,GAAAQ,IAAAF,EAAApC,KAAAD,SACAqC,GAAApC,KAAAD,UAAAuC,GACA,IAAAlC,GAiBA+B,EAAAzC,gBAAAA,EACAyC,EAAA3B,WAAAA,EAEA2B,MAKAhD,OAAAC,SAEA,SAAAH,GACA,YAEAA,GACAC,OAAA,qCACAqD,UAAA,sBACA,WACA,UACA,SACAhD,EACAiD,GCnDA,OACAC,SAAA,KACAC,SAAA,EACAC,YAAA,uEACAtD,WAAA,iEACAuD,aAAA,eACAC,OACAlD,UAAA,IACAoB,mBAAA,IACA+B,uBAAA,IACAC,WAAA,IACAC,kBAAA,IACAC,kBAAA,KAEAC,KAAA,SAAAL,EAAAM,EAAAC,EAAAC,GAEA,QAAAC,KACAD,EAAA5D,sBAGAoD,EAAAU,OAAA,yBAAA,SAAAC,EAAAC,GACAD,IAAAC,GAAAJ,EAAAhC,YACAgC,EAAA9B,UAAA8B,EAAA9B,UAAAiC,KAAA,IACAH,EAAAnD,SAAA,OAKA2C,EAAAa,IAAA,WAAA,WACAL,EAAAnC,WAAAC,QACAkC,EAAAnC,WAAAyC,QAEAN,EAAAhD,eAGAmC,EAAAoB,iBAAA,QAAA,WACArE,EAAA,WACA8D,EAAAnC,WAAAC,SACAkC,EAAAhC,UAAA,EACAgC,EAAAnD,gBAKAoD,UAOAnE,OAAAC,SAEAA,QAAAF,OAAA,qCAAA2E,KAAA,iBAAA,SAAAC,GAAAA,EAAAC,IAAA,uEAAA","file":"akit.component.chatservicer-button.min.js","sourcesContent":["(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton', []);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton', []);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton')\n        .controller('akit.component.chatservicerButton.chatservicerButtonController', [\n            '$scope',\n            '$timeout',\n            'akit.component.chatservicerButto.chatproxyService',\n            function (\n                $scope,\n                $timeout,\n                chatproxyService\n            ) {\n                var vm = this;\n\n                var pollTime = 1000;\n                var errorCount = 0;\n                var pollPromise;\n\n                vm.chatWindow = {\n                    closed: true\n                };\n                vm.available;\n                vm.disabled = false;\n                vm.occupied = false;\n                vm.popupOpen = false;\n\n                function getChatAvailability() {\n                    chatproxyService.getAvailability($scope.entitykey)\n                        .then(function (response) {\n                            vm.available = response.data.available;\n\n                            errorCount = 0;\n                            nextPoll();\n                        })\n                        .catch(function (response) {\n                            vm.available = false;\n\n                            errorCount += 1;\n                            nextPoll(errorCount * 2 * pollTime);\n                        });\n                }\n\n                function nextPoll(delay) {\n                    delay = delay || pollTime;\n\n                    // Clear last timeout before starting a new one\n                    cancelPoll();\n                    pollPromise = $timeout(getChatAvailability, delay);\n                }\n\n                function cancelPoll() {\n                    $timeout.cancel(pollPromise);\n                }\n\n                function getChatURL() {\n                    var chatURL = chatproxyService.getChatURL($scope.entitykey);\n                    return chatURL.data.url;\n                }\n\n                function clickHandler(available) {\n                    var windowName = 'chatservicer_window';\n                    var windowFeatures = 'width=640,height=480,resizable,scrollbars=yes,status=1';\n\n                    var windowUrl = $scope.urlWhenUnavailable || \"\";\n                    if (!available) {\n                        window.open(windowUrl, \"_blank\");\n                        // window.open(windowUrl, windowName, windowFeatures);\n                        return;\n                    }\n\n                    var chatUrlAvailable = getChatURL();\n\n                    // Check if a chat window is already open\n                    if (!vm.chatWindow.closed) {\n                        // if so focus back on the window and end here\n                        vm.chatWindow.focus();\n                        return;\n                    } else {\n                        vm.disabled = false;\n                    }\n\n                    if (vm.available) {\n                        // Chat is available\n                        if (chatUrlAvailable) {\n                            // Chat agent is also available => Stop polling + open window with chat url\n                            cancelPoll();\n\n                            var windowURL = chatUrlAvailable;\n\n                            vm.chatWindow = window.open(windowURL, windowName, windowFeatures);\n                            vm.disabled = true;\n                        } else {\n                            // Chat agents are all occupied => show popup with message + set chat availability to false\n                            vm.occupied = true;\n                            vm.popupOpen = !vm.popupOpen;\n                            vm.available = false;\n\n                            // Restart polling after 5 seconds to avoid closing of popup when availability changes\n                            nextPoll(5000);\n                        }\n                    } else {\n                        // Chat is unavailable\n                        if (vm.popupOpen && vm.occupied) {\n                            // Close popup if it was open when occupied\n                            vm.popupOpen = false;\n                        } else {\n                            // Toggle popup with standard info\n                            vm.occupied = false;\n                            vm.popupOpen = !vm.popupOpen;\n                        }\n                    }\n                }\n\n                vm.clickHandler = clickHandler;\n                vm.nextPoll = nextPoll;\n                vm.cancelPoll = cancelPoll;\n                vm.getChatAvailability = getChatAvailability;\n            }\n        ]);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton')\n        .constant('akit.component.chatservicerButton.chatproxyConfig', {\n            chatproxyServiceUrl: '/srv/chatservicer/d'\n        });\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton')\n        .service('akit.component.chatservicerButto.chatproxyService', [\n            '$http',\n            '$interval',\n            '$q',\n            'akit.component.chatservicerButton.chatproxyConfig',\n            function ($http, $interval, $q, chatproxyConfig) {\n\n                var API = {};\n\n                // Dummy data object for getAvailability call\n                var delay = 10;\n                var availabilityData = {\n                    \"success\": true,\n                    \"data\": {\n                        \"available\": true\n                    }\n                };\n\n                // Interval function to see if chat button gets updated\n                $interval(function () {\n                    var newData = !availabilityData.data.available;\n                    availabilityData.data.available = newData;\n                }, 1000 * delay);\n\n                function getAvailability(entitykey) {\n                    return $http.get(chatproxyConfig.chatproxyServiceUrl + \"/availability?entitykey=\" + entitykey, {\n                        overrideErrorHandling: true\n                    });\n                }\n\n                function getChatURL(entitykey) {\n                    return $http.get(chatproxyConfig.chatproxyServiceUrl + 'chaturl?entitykey=' + entitykey, {\n                        overrideErrorHandling: true\n                    })\n                    .then(function (response) {\n                        return response.data;\n                    });\n                }\n\n                API.getAvailability = getAvailability;\n                API.getChatURL = getChatURL;\n\n                return API;\n\n            }\n        ]);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton')\n        .directive('chatservicerButton', [\n            '$timeout',\n            '$window',\n            function (\n                $timeout,\n                $window\n            ) {\n\n                return {\n                    restrict: 'AE',\n                    replace: true,\n                    templateUrl: '/assets/chatservicer-button/views/directives/chatservicer-button.htm',\n                    controller: 'akit.component.chatservicerButton.chatservicerButtonController',\n                    controllerAs: 'chatservicer',\n                    scope: {\n                        entitykey: '@',\n                        urlWhenUnavailable: '@',\n                        availabilityServiceUrl: '@',\n                        buttonText: '@',\n                        buttonTextNoAgent: '@',\n                        getLinkServiceUrl: '@'\n                    },\n                    link: function (scope, element, attrs, ctrl) {\n\n                        function initialize() {\n                            ctrl.getChatAvailability();\n                        }\n\n                        scope.$watch('chatservicer.available', function onAvailabiltyChange(newValue, oldValue) {\n                            if (newValue !== oldValue && !ctrl.disabled) {\n                                if (!ctrl.occupied || (ctrl.occupied && newValue === true)) {\n                                    ctrl.nextPoll(2000);\n                                }\n                            }\n                        });\n\n                        scope.$on('$destroy', function () {\n                            // Close chat window and cancel polling if scope is destroyed\n                            if (!ctrl.chatWindow.closed) {\n                                ctrl.chatWindow.close();\n                            }\n                            ctrl.cancelPoll();\n                        });\n\n                        $window.addEventListener('focus', function () {\n                            // Had to wrap in timeout because chatwindow.closed wasn't\n                            // being set directly to false when it was closed in Firefox\n                            $timeout(function () {\n                                if (ctrl.chatWindow.closed) {\n                                    ctrl.disabled = false;\n                                    ctrl.nextPoll();\n                                }\n                            });\n                        });\n\n                        initialize();\n                    }\n                };\n\n            }\n        ]);\n\n})(window.angular);\n"],"sourceRoot":"dist/js"}