{"version":3,"sources":["module.js","main.js","constants/chatproxy-config.js","controllers/chatservicer-button.js","directives/chatservicer-button.js","services/chatproxy.js"],"names":["ng","module","window","angular","constant","chatproxyServiceUrl","controller","$scope","$timeout","chatproxyService","getChatAvailability","getAvailability","entitykey","then","response","vm","available","data","errorCount","nextPoll","pollTime","delay","cancelPoll","pollPromise","cancel","getChatURL","clickHandler","windowName","windowFeatures","windowUrl","urlWhenUnavailable","chatWindow","closed","focus","disabled","result","chatUrlAvailable","url","windowURL","referrer","location","href","indexOf","open","occupied","popupOpen","this","directive","$window","restrict","replace","templateUrl","controllerAs","scope","availabilityServiceUrl","buttonText","buttonTextNoAgent","getLinkServiceUrl","link","element","attrs","ctrl","initialize","$watch","newValue","oldValue","$on","addEventListener","service","$http","$interval","$q","chatproxyConfig","chatAvailabilityUrl","Date","now","toString","get","overrideErrorHandling","chatButtonUrl","API","run","$templateCache","put"],"mappings":"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","file":"akit.component.chatservicer-button.min.js","sourcesContent":["(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton', []);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton', []);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton')\n        .constant('akit.component.chatservicerButton.chatproxyConfig', {\n            chatproxyServiceUrl: '/srv/chatservicer/d'\n        });\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton')\n        .controller('akit.component.chatservicerButton.chatservicerButtonController', [\n            '$scope',\n            '$timeout',\n            'akit.component.chatservicerButto.chatproxyService',\n            function (\n                $scope,\n                $timeout,\n                chatproxyService\n            ) {\n                var vm = this;\n\n                var pollTime = 2000;\n                var errorCount = 0;\n                var pollPromise;\n\n                vm.chatWindow = {\n                    closed: true\n                };\n                vm.available;\n                vm.disabled = false;\n                vm.occupied = false;\n                vm.popupOpen = false;\n\n                function getChatAvailability() {\n                    chatproxyService.getAvailability($scope.entitykey)\n                        .then(function (response) {\n                            vm.available = response.data.available;\n\n                            errorCount = 0;\n                            nextPoll();\n                        })\n                        .catch(function (response) {\n                            vm.available = false;\n\n                            errorCount += 1;\n                            nextPoll(errorCount * 2 * pollTime);\n                        });\n                }\n\n                function nextPoll(delay) {\n                    delay = delay || pollTime;\n\n                    // Clear last timeout before starting a new one\n                    cancelPoll();\n                    pollPromise = $timeout(getChatAvailability, delay);\n                }\n\n                function cancelPoll() {\n                    $timeout.cancel(pollPromise);\n                }\n\n                function getChatURL() {\n                    return chatproxyService\n                        .getChatURL($scope.entitykey);\n                }\n\n                function clickHandler(available) {\n                    var windowName = 'chatservicer_window';\n                    var windowFeatures = 'width=640,height=480,resizable,scrollbars=yes,status=1';\n\n                    var windowUrl = $scope.urlWhenUnavailable || \"\";\n                    if (!available) {\n                        window.open(windowUrl, \"_blank\");\n                        return;\n                    }\n\n                    // Check if a chat window is already open\n                    if (vm.chatWindow && !vm.chatWindow.closed) {\n                        // if so focus back on the window and end here\n                        vm.chatWindow.focus();\n                        return;\n                    } else {\n                        vm.disabled = false;\n                    }\n\n                    getChatURL()\n                        .then(function (result) {\n                            var chatUrlAvailable = result.data.url;\n\n                            // Chat is available\n                            if (chatUrlAvailable) {\n                                // Chat agent is also available => Stop polling + open window with chat url\n                                cancelPoll();\n\n                                var windowURL = chatUrlAvailable;\n                                var referrer = 'referrer=' + window.location.href;\n\n                                if (chatUrlAvailable.indexOf('?') >= -1) {\n                                    referrer = '&' + referrer;\n                                } else {\n                                    referrer = '?' + referrer;\n                                }\n\n                                vm.chatWindow = window.open(windowURL + referrer, windowName, windowFeatures);\n                                vm.disabled = true;\n                            } else {\n                                // Chat agents are all occupied => show popup with message + set chat availability to false\n                                vm.occupied = true;\n                                vm.popupOpen = !vm.popupOpen;\n                                vm.available = false;\n\n                                // Restart polling after 5 seconds to avoid closing of popup when availability changes\n                                nextPoll(5000);\n                            }\n                        });\n                }\n\n                vm.clickHandler = clickHandler;\n                vm.nextPoll = nextPoll;\n                vm.cancelPoll = cancelPoll;\n                vm.getChatAvailability = getChatAvailability;\n            }\n        ]);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton')\n        .directive('chatservicerButton', [\n            '$timeout',\n            '$window',\n            function (\n                $timeout,\n                $window\n            ) {\n\n                return {\n                    restrict: 'AE',\n                    replace: true,\n                    templateUrl: '/assets/chatservicer-button/views/directives/chatservicer-button.htm',\n                    controller: 'akit.component.chatservicerButton.chatservicerButtonController',\n                    controllerAs: 'chatservicer',\n                    scope: {\n                        entitykey: '@',\n                        urlWhenUnavailable: '@',\n                        availabilityServiceUrl: '@',\n                        buttonText: '@',\n                        buttonTextNoAgent: '@',\n                        getLinkServiceUrl: '@'\n                    },\n                    link: function (scope, element, attrs, ctrl) {\n\n                        function initialize() {\n                            ctrl.getChatAvailability();\n                        }\n\n                        scope.$watch('chatservicer.available', function onAvailabiltyChange(newValue, oldValue) {\n                            if (newValue !== oldValue && !ctrl.disabled) {\n                                if (!ctrl.occupied || (ctrl.occupied && newValue === true)) {\n                                    ctrl.nextPoll(2000);\n                                }\n                            }\n                        });\n\n                        scope.$on('$destroy', function () {\n                            ctrl.cancelPoll();\n                        });\n\n                        $window.addEventListener('focus', function () {\n                            // Had to wrap in timeout because chatwindow.closed wasn't\n                            // being set directly to false when it was closed in Firefox\n                            $timeout(function () {\n                                if (ctrl.chatWindow && ctrl.chatWindow.closed) {\n                                    ctrl.disabled = false;\n                                    ctrl.nextPoll();\n                                }\n                            });\n                        });\n\n                        initialize();\n                    }\n                };\n\n            }\n        ]);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton')\n        .service('akit.component.chatservicerButto.chatproxyService', [\n            '$http',\n            '$interval',\n            '$q',\n            'akit.component.chatservicerButton.chatproxyConfig',\n            function ($http, $interval, $q, chatproxyConfig) {\n\n                var API = {};\n\n                function getAvailability(entitykey) {\n                    var chatAvailabilityUrl = chatproxyConfig.chatproxyServiceUrl + \"/availability?entitykey=\" + entitykey;\n\n                    // attempting to fix the caching troubles in IE...\n                    chatAvailabilityUrl += \"&kofefe=\" + Date.now().toString();\n\n                    return $http.get(chatAvailabilityUrl, {\n                        overrideErrorHandling: true\n                    })\n                    .then(function (response) {\n                        return response.data;\n                    });\n                }\n\n                function getChatURL(entitykey) {\n                    var chatButtonUrl = chatproxyConfig.chatproxyServiceUrl + '/chaturl?entitykey=' + entitykey;\n\n                    // attempting to fix the caching troubles in IE...\n                    chatButtonUrl += \"&kofefe=\" + Date.now().toString();\n\n                    return $http.get(chatButtonUrl, {\n                        overrideErrorHandling: true\n                    })\n                    .then(function (response) {\n                        return response.data;\n                    });\n                }\n\n                API.getAvailability = getAvailability;\n                API.getChatURL = getChatURL;\n\n                return API;\n\n            }\n        ]);\n\n})(window.angular);\n"],"sourceRoot":"dist/js"}