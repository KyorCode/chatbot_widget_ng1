{"version":3,"sources":["module.js","main.js","constants/chatproxy-config.js","controllers/chatservicer-button.js","directives/chatservicer-button.js","services/chatproxy.js"],"names":["ng","module","window","angular","constant","chatproxyServiceUrl","controller","$scope","$timeout","chatproxyService","getChatAvailability","getAvailability","entitykey","then","response","vm","available","data","errorCount","nextPoll","pollTime","time","cancelPoll","pollPromise","cancel","getChattersAvailability","chatters","getChatURL","success","chatURL","url","buttonClick","chattersAvailable","chatWindow","closed","focus","windowURL","windowName","windowFeatures","open","occupied","popupOpen","this","directive","restrict","replace","templateUrl","controllerAs","scope","link","element","attrs","ctrl","updateChatButton","initialize","$watch","newValue","oldValue","availabilityChanged","availableAndOccupied","$on","service","$http","$interval","$q","chatproxyConfig","promise","deferred","defer","resolve","reject","availabilityData","API","delay","newData","run","$templateCache","put"],"mappings":"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","file":"akit.component.chatservicer-button.min.js","sourcesContent":["(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton', []);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton', []);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton')\n        .constant('akit.component.chatservicerButton.chatproxyConfig', {\n            chatproxyServiceUrl: '/srv/chatproxy/d/'\n        });\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton')\n        .controller('akit.component.chatservicerButton.chatservicerButtonController', [\n            '$scope',\n            '$timeout',\n            'akit.component.chatservicerButto.chatproxyService',\n            function ($scope, $timeout, chatproxyService) {\n                var vm = this;\n\n                var chatWindow;\n                var pollTime = 1000;\n                var errorCount = 0;\n                var pollPromise;\n\n                vm.available;\n                vm.occupied = false;\n                vm.popupOpen = false;\n\n                function getChatAvailability() {\n                    chatproxyService.getAvailability($scope.entitykey)\n                        .then(function (response) {\n                            vm.available = response.data.available;\n\n                            errorCount = 0;\n                            nextPoll();\n                        })\n                        .catch(function (response) {\n                            vm.available = false;\n                            errorCount += 1;\n                            nextPoll(errorCount * 2 * pollTime);\n                        });\n                }\n\n                function nextPoll(time) {\n                    time = time || pollTime;\n\n                    // Clear last timeout before starting a new one\n                    cancelPoll();\n                    pollPromise = $timeout(getChatAvailability, time);\n                }\n\n                function cancelPoll() {\n                    $timeout.cancel(pollPromise);\n                }\n\n                // TODO: This will have to go\n                // we will check if we get a url or not with getChatURL()\n                function getChattersAvailability() {\n                    var chatters = chatproxyService.getChatURL($scope.entitykey);\n                    return chatters.success;\n                }\n\n                function getChatURL() {\n                    var chatURL = chatproxyService.getChatURL($scope.entitykey);\n                    return chatURL.data.url;\n                }\n\n                function buttonClick() {\n                    var chattersAvailable = getChattersAvailability();\n\n                    // Check if a chat window is already open\n                    if (chatWindow && !chatWindow.closed) {\n                        // if so focus back on the window and end here\n                        chatWindow.focus();\n                        return;\n                    }\n\n                    if (vm.available) {\n                        // Chat is available\n                        if (chattersAvailable) {\n                            // Chatter is also available => open window with chat url\n                            var windowURL = getChatURL();\n                            var windowName = 'Chatservicer_window';\n                            var windowFeatures = 'width=640,height=480,resizable,scrollbars=yes,status=1';\n\n                            chatWindow = window.open(windowURL, windowName, windowFeatures);\n                        } else {\n                            // Chatters are all occupied => show popup with message + set chat availability to false\n                            vm.occupied = true;\n                            vm.popupOpen = !vm.popupOpen;\n\n                            vm.available = false;\n                        }\n                    } else {\n                        // Chat is unavailable\n                        if (vm.popupOpen && !chattersAvailable) {\n                            // Close popup if it was open with unavailable text\n                            vm.popupOpen = false;\n                        } else {\n                            // Toggle popup with standard info\n                            vm.occupied = false;\n                            vm.popupOpen = !vm.popupOpen;\n                        }\n                    }\n                }\n\n                vm.buttonClick = buttonClick;\n                vm.cancelPoll = cancelPoll;\n                vm.getChatAvailability = getChatAvailability;\n            }\n        ]);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton')\n        .directive('chatservicerButton', [\n\n            function () {\n\n                return {\n                    restrict: 'AE',\n                    replace: true,\n                    templateUrl: '/assets/chatservicer-button/views/directives/chatservicer-button.htm',\n                    controller: 'akit.component.chatservicerButton.chatservicerButtonController',\n                    controllerAs: 'chatservicer',\n                    scope: {\n                        entitykey: '@'\n                    },\n                    link: function (scope, element, attrs, ctrl) {\n                        function updateChatButton() {\n                            if (ctrl.popupOpen) ctrl.popupOpen = false;\n                        }\n\n                        function initialize() {\n                            ctrl.getChatAvailability();\n                            updateChatButton();\n                        }\n\n                        scope.$watch('chatservicer.available', function onAvailabiltyChange(newValue, oldValue) {\n                            var availabilityChanged = newValue !== oldValue && !ctrl.occupied;\n                            var availableAndOccupied = newValue !== oldValue && newValue === true && ctrl.occupied;\n                            if ((availabilityChanged) || (availableAndOccupied)) {\n                                updateChatButton();\n                            }\n                        });\n\n                        scope.$on('$destroy', function () {\n                            ctrl.cancelPoll();\n                        });\n\n                        initialize();\n                    }\n                };\n\n            }\n        ]);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton')\n        .service('akit.component.chatservicerButto.chatproxyService', [\n            '$http',\n            '$interval',\n            '$q',\n            'akit.component.chatservicerButton.chatproxyConfig',\n            function ($http, $interval, $q, chatproxyConfig) {\n\n                var API = {};\n\n                // Dummy data object for getAvailability call\n                var delay = 10;\n                var availabilityData = {\n                    \"success\": true,\n                    \"data\": {\n                        \"available\": true\n                    }\n                };\n                // Interval function to see if chat button gets updated\n                $interval(function () {\n                    var newData = !availabilityData.data.available;\n                    availabilityData.data.available = newData;\n                }, 1000 * delay);\n\n                function getAvailability(entitykey) {\n                    // Call (return promise instead of data object)\n                    // return $http.get(chatproxyConfig.chatproxyServiceUrl + 'availability?entitykey=' + entitykey);\n\n                    function promise(data) {\n                        var deferred = $q.defer();\n\n                        if (data.success) {\n                            deferred.resolve(data);\n                        } else {\n                            deferred.reject(data);\n                        }\n\n                        return deferred.promise;\n                    }\n\n                    // Return dummy promise\n                    return promise(availabilityData);\n                }\n\n                function getChatURL(entitykey) {\n                    // Call\n                    // return $http.get(chatproxyConfig.chatproxyServiceUrl + 'chaturl?entitykey=' + entitykey)\n                    //     .then(function (response) {\n                    //         return response.data;\n                    //     });\n\n                    // Response example\n                    return {\n                        \"success\": false,\n                        \"data\": {\n                            \"url\": \"http://www.google.be\"\n                        }\n                    };\n                }\n\n                API.getAvailability = getAvailability;\n                API.getChatURL = getChatURL;\n\n                return API;\n\n            }\n        ]);\n\n})(window.angular);\n"],"sourceRoot":"dist/js"}