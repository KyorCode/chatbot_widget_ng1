{"version":3,"sources":["module.js","main.js","constants/chatproxy-config.js","directives/chatservicer-button.js","controllers/chatservicer-button.js","services/chatproxy.js"],"names":["ng","module","window","angular","constant","chatproxyServiceUrl","directive","$timeout","$window","restrict","replace","templateUrl","controller","controllerAs","scope","entitykey","link","element","attrs","ctrl","updateChatButton","popupOpen","initialize","getChatAvailability","$watch","newValue","oldValue","disabled","occupied","nextPoll","$on","chatWindow","closed","close","cancelPoll","addEventListener","$scope","chatproxyService","getAvailability","then","response","vm","available","data","errorCount","pollTime","delay","pollPromise","cancel","getChatURL","chatURL","url","clickHandler","chatUrlAvailable","focus","windowURL","windowName","windowFeatures","open","this","service","$http","$interval","$q","chatproxyConfig","promise","deferred","defer","success","resolve","reject","availabilityData","API","newData","run","$templateCache","put"],"mappings":"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","file":"akit.component.chatservicer-button.min.js","sourcesContent":["(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton', []);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton', []);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton')\n        .constant('akit.component.chatservicerButton.chatproxyConfig', {\n            chatproxyServiceUrl: '/srv/chatproxy/d/'\n        });\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton')\n        .directive('chatservicerButton', [\n            '$timeout',\n            '$window',\n            function (\n                $timeout,\n                $window\n            ) {\n\n                return {\n                    restrict: 'AE',\n                    replace: true,\n                    templateUrl: '/assets/chatservicer-button/views/directives/chatservicer-button.htm',\n                    controller: 'akit.component.chatservicerButton.chatservicerButtonController',\n                    controllerAs: 'chatservicer',\n                    scope: {\n                        entitykey: '@'\n                    },\n                    link: function (scope, element, attrs, ctrl) {\n                        function updateChatButton() {\n                            if (ctrl.popupOpen) ctrl.popupOpen = false;\n                        }\n\n                        function initialize() {\n                            ctrl.getChatAvailability();\n                            updateChatButton();\n                        }\n\n                        scope.$watch('chatservicer.available', function onAvailabiltyChange(newValue, oldValue) {\n                            if (newValue !== oldValue && !ctrl.disabled) {\n                                if (!ctrl.occupied || (ctrl.occupied && newValue === true)) {\n                                    updateChatButton();\n                                    ctrl.nextPoll(2000);\n                                }\n                            }\n                        });\n\n                        scope.$on('$destroy', function () {\n                            // Close chat window and cancel polling if scope is destroyed\n                            if (!ctrl.chatWindow.closed) {\n                                ctrl.chatWindow.close();\n                            }\n                            ctrl.cancelPoll();\n                        });\n\n                        $window.addEventListener('focus', function () {\n                            // Had to wrap in timeout because chatwindow.closed wasn't\n                            // being set directly to false when it was closed in Firefox\n                            $timeout(function () {\n                                if (ctrl.chatWindow.closed) {\n                                    ctrl.disabled = false;\n                                    ctrl.nextPoll();\n                                }\n                            });\n                        });\n\n                        initialize();\n                    }\n                };\n\n            }\n        ]);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton')\n        .controller('akit.component.chatservicerButton.chatservicerButtonController', [\n            '$scope',\n            '$timeout',\n            'akit.component.chatservicerButto.chatproxyService',\n            function (\n                $scope,\n                $timeout,\n                chatproxyService\n            ) {\n                var vm = this;\n\n                var pollTime = 1000;\n                var errorCount = 0;\n                var pollPromise;\n\n                vm.chatWindow = {\n                    closed: true\n                };\n                vm.available;\n                vm.disabled = false;\n                vm.occupied = false;\n                vm.popupOpen = false;\n\n                function getChatAvailability() {\n                    chatproxyService.getAvailability($scope.entitykey)\n                        .then(function (response) {\n                            vm.available = response.data.available;\n\n                            errorCount = 0;\n                            nextPoll();\n                        })\n                        .catch(function (response) {\n                            vm.available = false;\n\n                            errorCount += 1;\n                            nextPoll(errorCount * 2 * pollTime);\n                        });\n                }\n\n                function nextPoll(delay) {\n                    delay = delay || pollTime;\n\n                    // Clear last timeout before starting a new one\n                    cancelPoll();\n                    pollPromise = $timeout(getChatAvailability, delay);\n                }\n\n                function cancelPoll() {\n                    $timeout.cancel(pollPromise);\n                }\n\n                function getChatURL() {\n                    var chatURL = chatproxyService.getChatURL($scope.entitykey);\n                    return chatURL.data.url;\n                }\n\n                function clickHandler() {\n                    var chatUrlAvailable = getChatURL();\n\n                    // Check if a chat window is already open\n                    if (!vm.chatWindow.closed) {\n                        // if so focus back on the window and end here\n                        vm.chatWindow.focus();\n                        return;\n                    } else {\n                        vm.disabled = false;\n                    }\n\n                    if (vm.available) {\n                        // Chat is available\n                        if (chatUrlAvailable) {\n                            // Chat agent is also available => Stop polling + open window with chat url\n                            cancelPoll();\n\n                            var windowURL = chatUrlAvailable;\n                            var windowName = 'chatservicer_window';\n                            var windowFeatures = 'width=640,height=480,resizable,scrollbars=yes,status=1';\n\n                            vm.chatWindow = window.open(windowURL, windowName, windowFeatures);\n                            vm.disabled = true;\n                        } else {\n                            // Chat agents are all occupied => show popup with message + set chat availability to false\n                            vm.occupied = true;\n                            vm.popupOpen = !vm.popupOpen;\n                            vm.available = false;\n\n                            // Restart polling after 5 seconds to avoid closing of popup when availability changes\n                            nextPoll(5000);\n                        }\n                    } else {\n                        // Chat is unavailable\n                        if (vm.popupOpen && vm.occupied) {\n                            // Close popup if it was open when occupied\n                            vm.popupOpen = false;\n                        } else {\n                            // Toggle popup with standard info\n                            vm.occupied = false;\n                            vm.popupOpen = !vm.popupOpen;\n                        }\n                    }\n                }\n\n                vm.clickHandler = clickHandler;\n                vm.nextPoll = nextPoll;\n                vm.cancelPoll = cancelPoll;\n                vm.getChatAvailability = getChatAvailability;\n            }\n        ]);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatservicerButton')\n        .service('akit.component.chatservicerButto.chatproxyService', [\n            '$http',\n            '$interval',\n            '$q',\n            'akit.component.chatservicerButton.chatproxyConfig',\n            function ($http, $interval, $q, chatproxyConfig) {\n\n                var API = {};\n\n                // Dummy data object for getAvailability call\n                var delay = 10;\n                var availabilityData = {\n                    \"success\": true,\n                    \"data\": {\n                        \"available\": true\n                    }\n                };\n\n                // Interval function to see if chat button gets updated\n                $interval(function () {\n                    var newData = !availabilityData.data.available;\n                    availabilityData.data.available = newData;\n                }, 1000 * delay);\n\n                function getAvailability(entitykey) {\n                    // Call (return promise instead of data object)\n                    // return $http.get(chatproxyConfig.chatproxyServiceUrl + 'availability?entitykey=' + entitykey);\n\n                    function promise(data) {\n                        var deferred = $q.defer();\n\n                        if (data.success) {\n                            deferred.resolve(data);\n                        } else {\n                            deferred.reject(data);\n                        }\n\n                        return deferred.promise;\n                    }\n\n                    // Return dummy promise\n                    return promise(availabilityData);\n                }\n\n                function getChatURL(entitykey) {\n                    // Call\n                    // return $http.get(chatproxyConfig.chatproxyServiceUrl + 'chaturl?entitykey=' + entitykey)\n                    //     .then(function (response) {\n                    //         return response.data;\n                    //     });\n\n                    // Response example\n                    return {\n                        \"success\": true,\n                        \"data\": {\n                            \"url\": \"https://talk.attendedbyhumans.com/tbv1/call_chat_design.php?agent=santwerp\"\n                        }\n                    };\n                }\n\n                API.getAvailability = getAvailability;\n                API.getChatURL = getChatURL;\n\n                return API;\n\n            }\n        ]);\n\n})(window.angular);\n"],"sourceRoot":"dist/js"}